<project name="five-server" default="dist-linux" basedir=".">
	<description>
		Server component for the Five media system.
	</description>

	<!-- set global properties for this build -->
	<property name="src" location="src/main/java"/>
	<property name="src.tests" location="src/test/java"/>
	<property name="res" location="src/main/resources" />
	<property name="etc" location="etc"/>
	<property name="build" location="build" />
	<property name="build.classes" location="${build}/classes"/>
	<property name="build.tests" location="${build}/test-classes" />
	<property name="dist" location="dist"/>
	<property name="gen" location="gen"/>
	<property name="gen.src" location="${gen}/src/java"/>
	<property name="gen.res" location="${gen}/resources"/>
	<property name="libs" location="libs"/>
	<property name="data" location="data"/>

	<property name="reports.tests" location="test-reports" />

	<property name="protoc" value="protoc"/>

	<path id="compile.classpath">
		<fileset dir="${libs}">
			<include name="*.jar" />
		</fileset>

		<!-- For compilation, we can use any of the swt flavours
			 we want.  So, let's pick the least popular one to prove
			 that point ;) -->
		<pathelement location="${libs}/swt-3.5.1/win32-win32-x86/swt.jar" />
	</path>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.tests}"/>
		<mkdir dir="${gen.src}"/>
		<mkdir dir="${gen.res}"/>
	</target>

	<target name="testinit">
		<mkdir dir="${reports.tests}" />
	</target>

	<target name="build-props" depends="init">
		<mkdir dir="${gen.res}/org/devtcg/five" />
		<echo file="${gen.res}/org/devtcg/five/version.prop" append="false">${DSTAMP}</echo>
	</target>

	<target name="-checkprotoc">
		<uptodate property="protoc.notRequired">
			<srcfiles dir="${data}" includes="**/*.proto" />
			<mapper type="glob" from="*.proto" to="${gen.src}/*.java" />
		</uptodate>
	</target>

	<target name="protoc" unless="protoc.notRequired" depends="-checkprotoc, init">
		<echo>Compiling protobufs into Java classes...</echo>
		<apply executable="${protoc}" failonerror="true">
			<arg value="--java_out=${gen.src}" />
			<arg value="-I${data}" />
			<fileset dir="${data}">
				<include name="**/*.proto" />
			</fileset>
		</apply>
	</target>

	<target name="compile" depends="init, build-props, protoc" description="compile the source">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}:${gen.src}" destdir="${build.classes}"
				debug="true" debuglevel="lines,vars,source">
			<classpath refid="compile.classpath" />
		</javac>
	</target>

	<target name="compile.tests" depends="compile" description="compile unit tests">
		<javac srcdir="${src.tests}" destdir="${build.tests}"
				debug="true" debuglevel="lines,vars,source">
			<classpath>
				<path refid="compile.classpath" />
				<pathelement location="${build.classes}" />
			</classpath>
		</javac>
	</target>

	<target name="test" depends="testinit, compile.tests" description="run all unit tests">
		<junit printsummary="yes" fork="yes" haltonfailure="no">
			<formatter type="plain" />

			<classpath>
				<path refid="compile.classpath" />
				<pathelement location="${build.classes}" />
				<pathelement location="${build.tests}" />
			</classpath>
			<batchtest todir="${reports.tests}">
				<fileset dir="${src.tests}">
					<include name="**/*Test*.java" />
					<exclude name="**/AllTests.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="dist" depends="dist-clean, compile" description="generate the distribution" >
		<!-- Create the distribution directories -->
		<mkdir dir="${dist}/main" />
		<mkdir dir="${dist}/libs" />

		<copy todir="${dist}/libs" flatten="true">
			<fileset dir="${libs}">
				<include name="*.jar" />
			</fileset>
		</copy>

		<jar jarfile="${dist}/main/five-server.jar">
			<fileset dir="${build.classes}" />
			<fileset dir="${res}" />
			<fileset dir="${gen.res}" />
			<manifest>
				<attribute name="Main-Class" value="org.devtcg.five.Main" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
		</jar>
	</target>

	<target name="dist-linux" depends="dist">
		<copy tofile="${dist}/libs/x86/swt.jar" file="${libs}/swt-3.5.1/gtk-linux-x86/swt.jar" />
		<copy tofile="${dist}/libs/x86_64/swt.jar" file="${libs}/swt-3.5.1/gtk-linux-x86_64/swt.jar" />

		<exec executable="cp" failonerror="true">
			<arg value="${etc}/five-server.sh" />
			<arg value="${dist}/five-server" />
		</exec>
	</target>

	<target name="dist-windows" depends="dist">
		<copy tofile="${dist}/libs/x86/swt.jar" file="${libs}/swt-3.5.1/win32-win32-x86/swt.jar" />
	</target>

	<target name="dist-macosx" depends="dist">
		<copy tofile="${dist}/libs/x86/swt.jar" file="${libs}/swt-3.5.1/cocoa-macosx/swt.jar" />
		<copy tofile="${dist}/libs/ppc/swt.jar" file="${libs}/swt-3.5.1/cocoa-macosx/swt.jar" />
		<copy tofile="${dist}/libs/x86_64/swt.jar" file="${libs}/swt-3.5.1/cocoa-macosx-x86_64/swt.jar" />

		<exec executable="cp" failonerror="true">
			<arg value="${etc}/five-server.sh" />
			<arg value="${dist}/five-server" />
		</exec>
	</target>

	<target name="dist-clean">
		<delete dir="${dist}"/>
	</target>

	<target name="clean" depends="dist-clean" description="clean up" >
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
		<delete dir="${gen}" />
		<delete dir="${reports.tests}" />
	</target>
</project>
